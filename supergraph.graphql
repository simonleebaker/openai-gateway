
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  
  
  
  
  
  @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@enum", "@resolveRootField", "@resolveRoot", "@length", "@httpOperation", "@transport", "@extraSchemaDefinitionDirective"]
)
{
  query: Query
  mutation: Mutation
  
}


  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

  directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

  directive @join__graph(name: String!, url: String!) on ENUM_VALUE

  directive @join__implements(
    graph: join__Graph!
    interface: String!
  ) repeatable on OBJECT | INTERFACE

  directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

  scalar join__FieldSet


  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }







enum join__Graph {
  OPEN_AI @join__graph(name: "OpenAI", url: "") 
}

directive @enum(subgraph: String, value: String)  repeatable on ENUM_VALUE

directive @resolveRootField(subgraph: String, field: String)  repeatable on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @resolveRoot(subgraph: String)  repeatable on FIELD_DEFINITION

directive @length(subgraph: String, min: Int, max: Int)  repeatable on SCALAR

directive @httpOperation(
  subgraph: String
  path: String
  operationSpecificHeaders: [[String]]
  httpMethod: HTTPMethod
  isBinary: Boolean
  requestBaseBody: ObjMap
  queryParamArgMap: ObjMap
  queryStringOptionsByParam: ObjMap
  jsonApiFields: Boolean
  queryStringOptions: ObjMap
) repeatable on FIELD_DEFINITION

directive @transport(
  subgraph: String
  kind: String
  location: String
  headers: [[String]]
  queryStringOptions: ObjMap
  queryParams: [[String]]
) repeatable on SCHEMA

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @join__type(graph: OPEN_AI)  @specifiedBy(
  url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
)

"""
A string that cannot be passed as an empty value
"""
scalar NonEmptyString @join__type(graph: OPEN_AI) 

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt @join__type(graph: OPEN_AI) 

"""
Integers that will have a value greater than 0.
"""
scalar PositiveInt @join__type(graph: OPEN_AI) 

"""
The `File` scalar type represents a file upload.
"""
scalar File @join__type(graph: OPEN_AI) 

"""
Floats that will have a value of 0 or more.
"""
scalar NonNegativeFloat @join__type(graph: OPEN_AI) 

"""
A string of up to 40 characters that will be added to your fine-tuned model name.

For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
"""
scalar mutationInput_createFineTune_input_suffix @length(subgraph: "OpenAI", min: 1, max: 40)  @join__type(graph: OPEN_AI) 

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL @join__type(graph: OPEN_AI) 

scalar ObjMap @join__type(graph: OPEN_AI) 

scalar _DirectiveExtensions @join__type(graph: OPEN_AI) 

type Query @extraSchemaDefinitionDirective(directives: {transport: [{subgraph: "OpenAI", kind: "rest"}]})  @join__type(graph: OPEN_AI)  {
  """
  Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.
  """
  listEngines: ListEnginesResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/engines"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @deprecated(reason: "deprecated") 
  """
  Retrieves a model instance, providing basic information about it such as the owner and availability.
  """
  retrieveEngine("""
  The ID of the engine to use for this request
  """
  engine_id: String!) : Engine @httpOperation(
    subgraph: "OpenAI"
    path: "/engines/{args.engine_id}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @deprecated(reason: "deprecated") 
  """
  Returns a list of files that belong to the user's organization.
  """
  listFiles: ListFilesResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/files"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  )
  """
  Returns information about a specific file.
  """
  retrieveFile("""
  The ID of the file to use for this request
  """
  file_id: String!) : OpenAIFile @httpOperation(
    subgraph: "OpenAI"
    path: "/files/{args.file_id}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  )
  """
  Returns the contents of the specified file
  """
  downloadFile("""
  The ID of the file to use for this request
  """
  file_id: String!) : String @httpOperation(
    subgraph: "OpenAI"
    path: "/files/{args.file_id}/content"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  )
  """
  List your organization's fine-tuning jobs
  
  """
  listFineTunes: ListFineTunesResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/fine-tunes"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  )
  """
  Gets info about the fine-tune job.
  
  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
  
  """
  retrieveFineTune("""
  The ID of the fine-tune job
  """
  fine_tune_id: String!) : FineTune @httpOperation(
    subgraph: "OpenAI"
    path: "/fine-tunes/{args.fine_tune_id}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  )
  """
  Get fine-grained status updates for a fine-tune job.
  
  """
  listFineTuneEvents(
    """
    The ID of the fine-tune job to get events for.
    """
    fine_tune_id: String!
    """
    Whether to stream events for the fine-tune job. If set to true,
    events will be sent as data-only
    [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
    as they become available. The stream will terminate with a
    `data: [DONE]` message when the job is finished (succeeded, cancelled,
    or failed).
    
    If set to false, only events generated so far will be returned.
    """
    stream: Boolean
  ): ListFineTuneEventsResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/fine-tunes/{args.fine_tune_id}/events"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
    queryParamArgMap: "{\"stream\":\"stream\"}"
  )
  """
  Lists the currently available models, and provides basic information about each one such as the owner and availability.
  """
  listModels: ListModelsResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/models"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  )
  """
  Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
  """
  retrieveModel("""
  The ID of the model to use for this request
  """
  model: String!) : Model @httpOperation(
    subgraph: "OpenAI"
    path: "/models/{args.model}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  )
}

type ListEnginesResponse @join__type(graph: OPEN_AI)  {
  data: [Engine]!
  object: String!
}

type Engine @join__type(graph: OPEN_AI)  {
  created: Int
  id: String!
  object: String!
  ready: Boolean!
}

type ListFilesResponse @join__type(graph: OPEN_AI)  {
  data: [OpenAIFile]!
  object: String!
}

type OpenAIFile @join__type(graph: OPEN_AI)  {
  bytes: Int!
  created_at: Int!
  filename: String!
  id: String!
  object: String!
  purpose: String!
  status: String
  status_details: JSON
}

type ListFineTunesResponse @join__type(graph: OPEN_AI)  {
  data: [FineTune]!
  object: String!
}

type FineTune @join__type(graph: OPEN_AI)  {
  created_at: Int!
  events: [FineTuneEvent]
  fine_tuned_model: String
  hyperparams: JSON!
  id: String!
  model: String!
  object: String!
  organization_id: String!
  result_files: [OpenAIFile]!
  status: String!
  training_files: [OpenAIFile]!
  updated_at: Int!
  validation_files: [OpenAIFile]!
}

type FineTuneEvent @join__type(graph: OPEN_AI)  {
  created_at: Int!
  level: String!
  message: String!
  object: String!
}

type ListFineTuneEventsResponse @join__type(graph: OPEN_AI)  {
  data: [FineTuneEvent]!
  object: String!
}

type ListModelsResponse @join__type(graph: OPEN_AI)  {
  data: [Model]!
  object: String!
}

type Model @join__type(graph: OPEN_AI)  {
  created: Int!
  id: String!
  object: String!
  owned_by: String!
}

type Mutation @join__type(graph: OPEN_AI)  {
  """
  Answers the specified question using the provided documents and examples.
  
  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
  
  """
  createAnswer(input: CreateAnswerRequest_Input) : CreateAnswerResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/answers"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  ) @deprecated(reason: "deprecated") 
  """
  Transcribes audio into the input language.
  """
  createTranscription(input: CreateTranscriptionRequest_Input) : CreateTranscriptionResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/audio/transcriptions"
    operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Translates audio into into English.
  """
  createTranslation(input: CreateTranslationRequest_Input) : CreateTranslationResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/audio/translations"
    operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Creates a completion for the chat message
  """
  createChatCompletion(input: CreateChatCompletionRequest_Input) : CreateChatCompletionResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/chat/completions"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Classifies the specified `query` using provided examples.
  
  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples
  to select the ones most relevant for the particular query. Then, the relevant examples
  are combined with the query to construct a prompt to produce the final label via the
  [completions](/docs/api-reference/completions) endpoint.
  
  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the
  request using the `examples` parameter for quick tests and small scale use cases.
  
  """
  createClassification(input: CreateClassificationRequest_Input) : CreateClassificationResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/classifications"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  ) @deprecated(reason: "deprecated") 
  """
  Creates a completion for the provided prompt and parameters
  """
  createCompletion(input: CreateCompletionRequest_Input) : CreateCompletionResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/completions"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Creates a new edit for the provided input, instruction, and parameters.
  """
  createEdit(input: CreateEditRequest_Input) : CreateEditResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/edits"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Creates an embedding vector representing the input text.
  """
  createEmbedding(input: CreateEmbeddingRequest_Input) : CreateEmbeddingResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/embeddings"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.
  
  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.
  
  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
  
  """
  createSearch(
    """
    The ID of the engine to use for this request.  You can select one of `ada`, `babbage`, `curie`, or `davinci`.
    """
    engine_id: String!
    input: CreateSearchRequest_Input
  ): CreateSearchResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/engines/{args.engine_id}/search"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  ) @deprecated(reason: "deprecated") 
  """
  Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
  
  """
  createFile(input: CreateFileRequest_Input) : OpenAIFile @httpOperation(
    subgraph: "OpenAI"
    path: "/files"
    operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Delete a file.
  """
  deleteFile("""
  The ID of the file to use for this request
  """
  file_id: String!) : DeleteFileResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/files/{args.file_id}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: DELETE
  )
  """
  Creates a job that fine-tunes a specified model from a given dataset.
  
  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
  
  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
  
  """
  createFineTune(input: CreateFineTuneRequest_Input) : FineTune @httpOperation(
    subgraph: "OpenAI"
    path: "/fine-tunes"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Immediately cancel a fine-tune job.
  
  """
  cancelFineTune("""
  The ID of the fine-tune job to cancel
  """
  fine_tune_id: String!) : FineTune @httpOperation(
    subgraph: "OpenAI"
    path: "/fine-tunes/{args.fine_tune_id}/cancel"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Creates an edited or extended image given an original image and a prompt.
  """
  createImageEdit(input: CreateImageEditRequest_Input) : ImagesResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/images/edits"
    operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Creates an image given a prompt.
  """
  createImage(input: CreateImageRequest_Input) : ImagesResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/images/generations"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Creates a variation of a given image.
  """
  createImageVariation(input: CreateImageVariationRequest_Input) : ImagesResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/images/variations"
    operationSpecificHeaders: [["Content-Type", "multipart/form-data"], ["accept", "application/json"]]
    httpMethod: POST
  )
  """
  Delete a fine-tuned model. You must have the Owner role in your organization.
  """
  deleteModel("""
  The model to delete
  """
  model: URL!) : DeleteModelResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/models/{args.model}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: DELETE
  )
  """
  Classifies if text violates OpenAI's Content Policy
  """
  createModeration(input: CreateModerationRequest_Input) : CreateModerationResponse @httpOperation(
    subgraph: "OpenAI"
    path: "/moderations"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  )
}

type CreateAnswerResponse @join__type(graph: OPEN_AI)  {
  answers: [String]
  completion: String
  model: String
  object: String
  search_model: String
  selected_documents: [mutation_createAnswer_selected_documents_items]
}

type mutation_createAnswer_selected_documents_items @join__type(graph: OPEN_AI)  {
  document: Int
  text: String
}

type CreateTranscriptionResponse @join__type(graph: OPEN_AI)  {
  text: String!
}

type CreateTranslationResponse @join__type(graph: OPEN_AI)  {
  text: String!
}

type CreateChatCompletionResponse @join__type(graph: OPEN_AI)  {
  choices: [mutation_createChatCompletion_choices_items]!
  created: Int!
  id: String!
  model: String!
  object: String!
  usage: mutation_createChatCompletion_usage
}

type mutation_createChatCompletion_choices_items @join__type(graph: OPEN_AI)  {
  finish_reason: String
  index: Int
  message: ChatCompletionResponseMessage
}

type ChatCompletionResponseMessage @join__type(graph: OPEN_AI)  {
  """
  The contents of the message
  """
  content: String!
  role: mutation_createChatCompletion_choices_items_message_role!
}

type mutation_createChatCompletion_usage @join__type(graph: OPEN_AI)  {
  completion_tokens: Int!
  prompt_tokens: Int!
  total_tokens: Int!
}

type CreateClassificationResponse @join__type(graph: OPEN_AI)  {
  completion: String
  label: String
  model: String
  object: String
  search_model: String
  selected_examples: [mutation_createClassification_selected_examples_items]
}

type mutation_createClassification_selected_examples_items @join__type(graph: OPEN_AI)  {
  document: Int
  label: String
  text: String
}

type CreateCompletionResponse @join__type(graph: OPEN_AI)  {
  choices: [mutation_createCompletion_choices_items]!
  created: Int!
  id: String!
  model: String!
  object: String!
  usage: mutation_createCompletion_usage
}

type mutation_createCompletion_choices_items @join__type(graph: OPEN_AI)  {
  finish_reason: String
  index: Int
  logprobs: mutation_createCompletion_choices_items_logprobs
  text: String
}

type mutation_createCompletion_choices_items_logprobs @join__type(graph: OPEN_AI)  {
  text_offset: [Int]
  token_logprobs: [Float]
  tokens: [String]
  top_logprobs: [JSON]
}

type mutation_createCompletion_usage @join__type(graph: OPEN_AI)  {
  completion_tokens: Int!
  prompt_tokens: Int!
  total_tokens: Int!
}

type CreateEditResponse @join__type(graph: OPEN_AI)  {
  choices: [mutation_createEdit_choices_items]!
  created: Int!
  object: String!
  usage: mutation_createEdit_usage!
}

type mutation_createEdit_choices_items @join__type(graph: OPEN_AI)  {
  finish_reason: String
  index: Int
  logprobs: mutation_createEdit_choices_items_logprobs
  text: String
}

type mutation_createEdit_choices_items_logprobs @join__type(graph: OPEN_AI)  {
  text_offset: [Int]
  token_logprobs: [Float]
  tokens: [String]
  top_logprobs: [JSON]
}

type mutation_createEdit_usage @join__type(graph: OPEN_AI)  {
  completion_tokens: Int!
  prompt_tokens: Int!
  total_tokens: Int!
}

type CreateEmbeddingResponse @join__type(graph: OPEN_AI)  {
  data: [mutation_createEmbedding_data_items]!
  model: String!
  object: String!
  usage: mutation_createEmbedding_usage!
}

type mutation_createEmbedding_data_items @join__type(graph: OPEN_AI)  {
  embedding: [Float]!
  index: Int!
  object: String!
}

type mutation_createEmbedding_usage @join__type(graph: OPEN_AI)  {
  prompt_tokens: Int!
  total_tokens: Int!
}

type CreateSearchResponse @join__type(graph: OPEN_AI)  {
  data: [mutation_createSearch_data_items]
  model: String
  object: String
}

type mutation_createSearch_data_items @join__type(graph: OPEN_AI)  {
  document: Int
  object: String
  score: Float
}

type DeleteFileResponse @join__type(graph: OPEN_AI)  {
  deleted: Boolean!
  id: String!
  object: String!
}

type ImagesResponse @join__type(graph: OPEN_AI)  {
  created: Int!
  data: [mutation_createImageEdit_data_items]!
}

type mutation_createImageEdit_data_items @join__type(graph: OPEN_AI)  {
  b64_json: String
  url: String
}

type DeleteModelResponse @join__type(graph: OPEN_AI)  {
  deleted: Boolean!
  id: String!
  object: String!
}

type CreateModerationResponse @join__type(graph: OPEN_AI)  {
  id: String!
  model: String!
  results: [mutation_createModeration_results_items]!
}

type mutation_createModeration_results_items @join__type(graph: OPEN_AI)  {
  categories: mutation_createModeration_results_items_categories!
  category_scores: mutation_createModeration_results_items_category_scores!
  flagged: Boolean!
}

type mutation_createModeration_results_items_categories @join__type(graph: OPEN_AI)  {
  hate: Boolean!
  hate_threatening: Boolean! @resolveRootField(subgraph: "OpenAI", field: "hate/threatening") 
  self_harm: Boolean! @resolveRootField(subgraph: "OpenAI", field: "self-harm") 
  sexual: Boolean!
  sexual_minors: Boolean! @resolveRootField(subgraph: "OpenAI", field: "sexual/minors") 
  violence: Boolean!
  violence_graphic: Boolean! @resolveRootField(subgraph: "OpenAI", field: "violence/graphic") 
}

type mutation_createModeration_results_items_category_scores @join__type(graph: OPEN_AI)  {
  hate: Float!
  hate_threatening: Float! @resolveRootField(subgraph: "OpenAI", field: "hate/threatening") 
  self_harm: Float! @resolveRootField(subgraph: "OpenAI", field: "self-harm") 
  sexual: Float!
  sexual_minors: Float! @resolveRootField(subgraph: "OpenAI", field: "sexual/minors") 
  violence: Float!
  violence_graphic: Float! @resolveRootField(subgraph: "OpenAI", field: "violence/graphic") 
}

"""
The role of the author of this message.
"""
enum mutation_createChatCompletion_choices_items_message_role @join__type(graph: OPEN_AI)  {
  system @join__enumValue(graph: OPEN_AI) 
  user @join__enumValue(graph: OPEN_AI) 
  assistant @join__enumValue(graph: OPEN_AI) 
}

"""
The role of the author of this message.
"""
enum mutationInput_createChatCompletion_input_messages_items_role @join__type(graph: OPEN_AI)  {
  system @join__enumValue(graph: OPEN_AI) 
  user @join__enumValue(graph: OPEN_AI) 
  assistant @join__enumValue(graph: OPEN_AI) 
}

"""
The format in which the generated images are returned. Must be one of `url` or `b64_json`.
"""
enum mutationInput_createImageEdit_input_response_format @join__type(graph: OPEN_AI)  {
  url @join__enumValue(graph: OPEN_AI) 
  b64_json @join__enumValue(graph: OPEN_AI) 
}

"""
The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
"""
enum mutationInput_createImageEdit_input_size @join__type(graph: OPEN_AI)  {
  _256x256 @enum(subgraph: "OpenAI", value: "\"256x256\"")  @join__enumValue(graph: OPEN_AI) 
  _512x512 @enum(subgraph: "OpenAI", value: "\"512x512\"")  @join__enumValue(graph: OPEN_AI) 
  _1024x1024 @enum(subgraph: "OpenAI", value: "\"1024x1024\"")  @join__enumValue(graph: OPEN_AI) 
}

"""
The format in which the generated images are returned. Must be one of `url` or `b64_json`.
"""
enum mutationInput_createImage_input_response_format @join__type(graph: OPEN_AI)  {
  url @join__enumValue(graph: OPEN_AI) 
  b64_json @join__enumValue(graph: OPEN_AI) 
}

"""
The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
"""
enum mutationInput_createImage_input_size @join__type(graph: OPEN_AI)  {
  _256x256 @enum(subgraph: "OpenAI", value: "\"256x256\"")  @join__enumValue(graph: OPEN_AI) 
  _512x512 @enum(subgraph: "OpenAI", value: "\"512x512\"")  @join__enumValue(graph: OPEN_AI) 
  _1024x1024 @enum(subgraph: "OpenAI", value: "\"1024x1024\"")  @join__enumValue(graph: OPEN_AI) 
}

"""
The format in which the generated images are returned. Must be one of `url` or `b64_json`.
"""
enum mutationInput_createImageVariation_input_response_format @join__type(graph: OPEN_AI)  {
  url @join__enumValue(graph: OPEN_AI) 
  b64_json @join__enumValue(graph: OPEN_AI) 
}

"""
The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
"""
enum mutationInput_createImageVariation_input_size @join__type(graph: OPEN_AI)  {
  _256x256 @enum(subgraph: "OpenAI", value: "\"256x256\"")  @join__enumValue(graph: OPEN_AI) 
  _512x512 @enum(subgraph: "OpenAI", value: "\"512x512\"")  @join__enumValue(graph: OPEN_AI) 
  _1024x1024 @enum(subgraph: "OpenAI", value: "\"1024x1024\"")  @join__enumValue(graph: OPEN_AI) 
}

enum HTTPMethod @join__type(graph: OPEN_AI)  {
  GET @join__enumValue(graph: OPEN_AI) 
  HEAD @join__enumValue(graph: OPEN_AI) 
  POST @join__enumValue(graph: OPEN_AI) 
  PUT @join__enumValue(graph: OPEN_AI) 
  DELETE @join__enumValue(graph: OPEN_AI) 
  CONNECT @join__enumValue(graph: OPEN_AI) 
  OPTIONS @join__enumValue(graph: OPEN_AI) 
  TRACE @join__enumValue(graph: OPEN_AI) 
  PATCH @join__enumValue(graph: OPEN_AI) 
}

input CreateAnswerRequest_Input @join__type(graph: OPEN_AI)  {
  """
  List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.
  
  You should specify either `documents` or a `file`, but not both.
  """
  documents: [String]
  """
  List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like. We recommend adding 2 to 3 examples.
  """
  examples: [[NonEmptyString]]!
  """
  A text snippet containing the contextual information used to generate the answers for the `examples` you provide.
  """
  examples_context: String!
  """
  If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
  """
  expand: [JSON] = []
  """
  The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
  
  You should specify either `documents` or a `file`, but not both.
  """
  file: String
  logit_bias: JSON
  """
  Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
  
  The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
  
  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
  """
  logprobs: NonNegativeInt
  """
  The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
  """
  max_rerank: Int = 200
  """
  The maximum number of tokens allowed for the generated answer
  """
  max_tokens: Int = 16
  """
  ID of the model to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.
  """
  model: String!
  """
  How many answers to generate for each question.
  """
  n: PositiveInt = 1
  """
  Question to get answered.
  """
  question: NonEmptyString!
  """
  A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
  
  This flag only takes effect when `file` is set.
  """
  return_metadata: Boolean
  """
  If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
  """
  return_prompt: Boolean
  """
  ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
  """
  search_model: String = "ada"
  stop: [String]
  """
  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
  """
  temperature: Float
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input CreateTranscriptionRequest_Input @join__type(graph: OPEN_AI)  {
  """
  The audio file to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
  """
  file: File!
  """
  The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
  """
  language: String
  """
  ID of the model to use. Only `whisper-1` is currently available.
  """
  model: String!
  """
  An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
  """
  prompt: String
  """
  The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
  """
  response_format: String = "json"
  """
  The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
  """
  temperature: Float
}

input CreateTranslationRequest_Input @join__type(graph: OPEN_AI)  {
  """
  The audio file to translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
  """
  file: File!
  """
  ID of the model to use. Only `whisper-1` is currently available.
  """
  model: String!
  """
  An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
  """
  prompt: String
  """
  The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
  """
  response_format: String = "json"
  """
  The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
  """
  temperature: Float
}

input CreateChatCompletionRequest_Input @join__type(graph: OPEN_AI)  {
  """
  Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
  
  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
  """
  frequency_penalty: Float
  logit_bias: JSON
  """
  The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
  """
  max_tokens: Int
  """
  The messages to generate chat completions for, in the [chat format](/docs/guides/chat/introduction).
  """
  messages: [ChatCompletionRequestMessage_Input]!
  """
  ID of the model to use. Currently, only `gpt-3.5-turbo` and `gpt-3.5-turbo-0301` are supported.
  """
  model: String!
  """
  How many chat completion choices to generate for each input message.
  """
  n: PositiveInt = 1
  """
  Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
  
  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
  """
  presence_penalty: Float
  stop: [String]
  """
  If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
  """
  stream: Boolean
  """
  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
  
  We generally recommend altering this or `top_p` but not both.
  """
  temperature: NonNegativeFloat = 1
  """
  An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
  
  We generally recommend altering this or `temperature` but not both.
  """
  top_p: NonNegativeFloat = 1
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input ChatCompletionRequestMessage_Input @join__type(graph: OPEN_AI)  {
  """
  The contents of the message
  """
  content: String!
  """
  The name of the user in a multi-user chat
  """
  name: String
  role: mutationInput_createChatCompletion_input_messages_items_role!
}

input CreateClassificationRequest_Input @join__type(graph: OPEN_AI)  {
  """
  A list of examples with labels, in the following format:
  
  `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`
  
  All the label strings will be normalized to be capitalized.
  
  You should specify either `examples` or `file`, but not both.
  """
  examples: [[NonEmptyString]]
  """
  If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
  """
  expand: [JSON] = []
  """
  The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
  
  You should specify either `examples` or `file`, but not both.
  """
  file: String
  """
  The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
  """
  labels: [String]
  logit_bias: JSON
  """
  Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
  
  The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
  
  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
  """
  logprobs: NonNegativeInt
  """
  The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
  """
  max_examples: Int = 200
  """
  ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
  """
  model: String!
  """
  Query to be classified.
  """
  query: NonEmptyString!
  """
  A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
  
  This flag only takes effect when `file` is set.
  """
  return_metadata: Boolean
  """
  If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
  """
  return_prompt: Boolean
  """
  ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
  """
  search_model: String = "ada"
  """
  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
  """
  temperature: NonNegativeFloat
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input CreateCompletionRequest_Input @join__type(graph: OPEN_AI)  {
  """
  Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
  
  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
  
  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
  """
  best_of: NonNegativeInt = 1
  """
  Echo back the prompt in addition to the completion
  """
  echo: Boolean
  """
  Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
  
  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
  """
  frequency_penalty: Float
  logit_bias: JSON
  """
  Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
  
  The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
  """
  logprobs: NonNegativeInt
  """
  The maximum number of [tokens](/tokenizer) to generate in the completion.
  
  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).
  """
  max_tokens: NonNegativeInt = 16
  """
  ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
  """
  model: String!
  """
  How many completions to generate for each prompt.
  
  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
  """
  n: PositiveInt = 1
  """
  Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
  
  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
  """
  presence_penalty: Float
  prompt: [mutationInput_createCompletion_input_prompt_Input] = [{}]
  stop: [String]
  """
  Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
  """
  stream: Boolean
  """
  The suffix that comes after a completion of inserted text.
  """
  suffix: String
  """
  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
  
  We generally recommend altering this or `top_p` but not both.
  """
  temperature: NonNegativeFloat = 1
  """
  An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
  
  We generally recommend altering this or `temperature` but not both.
  """
  top_p: NonNegativeFloat = 1
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input mutationInput_createCompletion_input_prompt_Input @join__type(graph: OPEN_AI)  {
  String: String
  Int: Int
  Int_list: [Int]
}

input CreateEditRequest_Input @join__type(graph: OPEN_AI)  {
  """
  The input text to use as a starting point for the edit.
  """
  input: String
  """
  The instruction that tells the model how to edit the prompt.
  """
  instruction: String!
  """
  ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
  """
  model: String!
  """
  How many edits to generate for the input and instruction.
  """
  n: PositiveInt = 1
  """
  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
  
  We generally recommend altering this or `top_p` but not both.
  """
  temperature: NonNegativeFloat = 1
  """
  An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
  
  We generally recommend altering this or `temperature` but not both.
  """
  top_p: NonNegativeFloat = 1
}

input CreateEmbeddingRequest_Input @join__type(graph: OPEN_AI)  {
  """
  Input text to get embeddings for, encoded as a string or array of tokens. To get embeddings for multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed 8192 tokens in length.
  """
  input: String!
  """
  ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
  """
  model: String!
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input CreateSearchRequest_Input @join__type(graph: OPEN_AI)  {
  """
  Up to 200 documents to search over, provided as a list of strings.
  
  The maximum document length (in tokens) is 2034 minus the number of tokens in the query.
  
  You should specify either `documents` or a `file`, but not both.
  """
  documents: [String]
  """
  The ID of an uploaded file that contains documents to search over.
  
  You should specify either `documents` or a `file`, but not both.
  """
  file: String
  """
  The maximum number of documents to be re-ranked and returned by search.
  
  This flag only takes effect when `file` is set.
  """
  max_rerank: PositiveInt = 200
  """
  Query to search against the documents.
  """
  query: NonEmptyString!
  """
  A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
  
  This flag only takes effect when `file` is set.
  """
  return_metadata: Boolean
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input CreateFileRequest_Input @join__type(graph: OPEN_AI)  {
  """
  Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.
  
  If the `purpose` is set to "fine-tune", each line is a JSON record with "prompt" and "completion" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).
  """
  file: File!
  """
  The intended purpose of the uploaded documents.
  
  Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.
  """
  purpose: String!
}

input CreateFineTuneRequest_Input @join__type(graph: OPEN_AI)  {
  """
  The batch size to use for training. The batch size is the number of
  training examples used to train a single forward and backward pass.
  
  By default, the batch size will be dynamically configured to be
  ~0.2% of the number of examples in the training set, capped at 256 -
  in general, we've found that larger batch sizes tend to work better
  for larger datasets.
  """
  batch_size: Int
  """
  If this is provided, we calculate F-beta scores at the specified
  beta values. The F-beta score is a generalization of F-1 score.
  This is only used for binary classification.
  
  With a beta of 1 (i.e. the F-1 score), precision and recall are
  given the same weight. A larger beta score puts more weight on
  recall and less on precision. A smaller beta score puts more weight
  on precision and less on recall.
  """
  classification_betas: [Float]
  """
  The number of classes in a classification task.
  
  This parameter is required for multiclass classification.
  """
  classification_n_classes: Int
  """
  The positive class in binary classification.
  
  This parameter is needed to generate precision, recall, and F1
  metrics when doing binary classification.
  """
  classification_positive_class: String
  """
  If set, we calculate classification-specific metrics such as accuracy
  and F-1 score using the validation set at the end of every epoch.
  These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
  
  In order to compute classification metrics, you must provide a
  `validation_file`. Additionally, you must
  specify `classification_n_classes` for multiclass classification or
  `classification_positive_class` for binary classification.
  """
  compute_classification_metrics: Boolean
  """
  The learning rate multiplier to use for training.
  The fine-tuning learning rate is the original learning rate used for
  pretraining multiplied by this value.
  
  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2
  depending on final `batch_size` (larger learning rates tend to
  perform better with larger batch sizes). We recommend experimenting
  with values in the range 0.02 to 0.2 to see what produces the best
  results.
  """
  learning_rate_multiplier: Float
  """
  The name of the base model to fine-tune. You can select one of "ada",
  "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21.
  To learn more about these models, see the
  [Models](https://platform.openai.com/docs/models) documentation.
  """
  model: String = "curie"
  """
  The number of epochs to train the model for. An epoch refers to one
  full cycle through the training dataset.
  """
  n_epochs: Int = 4
  """
  The weight to use for loss on the prompt tokens. This controls how
  much the model tries to learn to generate the prompt (as compared
  to the completion which always has a weight of 1.0), and can add
  a stabilizing effect to training when completions are short.
  
  If prompts are extremely long (relative to completions), it may make
  sense to reduce this weight so as to avoid over-prioritizing
  learning the prompt.
  """
  prompt_loss_weight: Float = 0.01
  """
  A string of up to 40 characters that will be added to your fine-tuned model name.
  
  For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
  """
  suffix: mutationInput_createFineTune_input_suffix
  """
  The ID of an uploaded file that contains training data.
  
  See [upload file](/docs/api-reference/files/upload) for how to upload a file.
  
  Your dataset must be formatted as a JSONL file, where each training
  example is a JSON object with the keys "prompt" and "completion".
  Additionally, you must upload your file with the purpose `fine-tune`.
  
  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
  """
  training_file: String!
  """
  The ID of an uploaded file that contains validation data.
  
  If you provide this file, the data is used to generate validation
  metrics periodically during fine-tuning. These metrics can be viewed in
  the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
  Your train and validation data should be mutually exclusive.
  
  Your dataset must be formatted as a JSONL file, where each validation
  example is a JSON object with the keys "prompt" and "completion".
  Additionally, you must upload your file with the purpose `fine-tune`.
  
  See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
  """
  validation_file: String
}

input CreateImageEditRequest_Input @join__type(graph: OPEN_AI)  {
  """
  The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
  """
  image: File!
  """
  An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
  """
  mask: File
  """
  The number of images to generate. Must be between 1 and 10.
  """
  n: PositiveInt = 1
  """
  A text description of the desired image(s). The maximum length is 1000 characters.
  """
  prompt: String!
  response_format: mutationInput_createImageEdit_input_response_format = url
  size: mutationInput_createImageEdit_input_size = _1024x1024
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input CreateImageRequest_Input @join__type(graph: OPEN_AI)  {
  """
  The number of images to generate. Must be between 1 and 10.
  """
  n: PositiveInt = 1
  """
  A text description of the desired image(s). The maximum length is 1000 characters.
  """
  prompt: String!
  response_format: mutationInput_createImage_input_response_format = url
  size: mutationInput_createImage_input_size = _1024x1024
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input CreateImageVariationRequest_Input @join__type(graph: OPEN_AI)  {
  """
  The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
  """
  image: File!
  """
  The number of images to generate. Must be between 1 and 10.
  """
  n: PositiveInt = 1
  response_format: mutationInput_createImageVariation_input_response_format = url
  size: mutationInput_createImageVariation_input_size = _1024x1024
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input CreateModerationRequest_Input @join__type(graph: OPEN_AI)  {
  input: [String]!
  """
  Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
  
  The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
  """
  model: String! = "text-moderation-latest"
}
    